JCCal - Java CommandLine Calendar utility.


# Primarily intended to be used for GeekTool calendar output.

Proper command line calendar output for GeekTool should support these features:
- Rendering of only "highlights" (current date, week number, day of week) keeping their position;
- Relative start/end parameters, like -1 year to +1 year, -3 months to +3 months etc;
- Nice to have are customizations of rendering: grid, spacing, show/hide week numbers etc.

Example of usage (in bash/zsh):
	java -jar jccal.jar -em p3 -sm m4 -cols 3 -pvx l -mhs " " -dvs "\!"
	Here we ask JCCal to render months from 3 past 'til 2 next, in 3 columns, putting vertical axis values (weeks numbers in this case)
	to the right, separating months horizontally with empty line, separating days vertically with ! symbol.
	
	Produced result will look like this:
2012 April               2012 May                 2012 June                
Mo!Tu!We!Th!Fr!Sa!Su!    Mo!Tu!We!Th!Fr!Sa!Su!    Mo!Tu!We!Th!Fr!Sa!Su!  
  !  !  !  !  !  !1 !13    !1 !2 !3 !4 !5 !6 !18    !  !  !  !1 !2 !3 !22
2 !3 !4 !5 !6 !7 !8 !14  7 !8 !9 !10!11!12!13!19  4 !5 !6 !7 !8 !9 !10!23
9 !10!11!12!13!14!15!15  14!15!16!17!18!19!20!20  11!12!13!14!15!16!17!24
16!17!18!19!20!21!22!16  21!22!23!24!25!26!27!21  18!19!20!21!22!23!24!25
23!24!25!26!27!28!29!17  28!29!30!31!  !  !  !22  25!26!27!28!29!30!  !26
30!  !  !  !  !  !  !18    !  !  !  !  !  !  !      !  !  !  !  !  !  !  
                                                                         
2012 July                2012 August              2012 September           
Mo!Tu!We!Th!Fr!Sa!Su!    Mo!Tu!We!Th!Fr!Sa!Su!    Mo!Tu!We!Th!Fr!Sa!Su!  
  !  !  !  !  !  !1 !26    !  !1 !2 !3 !4 !5 !31    !  !  !  !  !1 !2 !35
2 !3 !4 !5 !6 !7 !8 !27  6 !7 !8 !9 !10!11!12!32  3 !4 !5 !6 !7 !8 !9 !36
9 !10!11!12!13!14!15!28  13!14!15!16!17!18!19!33  10!11!12!13!14!15!16!37
16!17!18!19!20!21!22!29  20!21!22!23!24!25!26!34  17!18!19!20!21!22!23!38
23!24!25!26!27!28!29!30  27!28!29!30!31!  !  !35  24!25!26!27!28!29!30!39
30!31!  !  !  !  !  !31    !  !  !  !  !  !  !      !  !  !  !  !  !  !  
                                                                         
2012 October             2012 November            
Mo!Tu!We!Th!Fr!Sa!Su!    Mo!Tu!We!Th!Fr!Sa!Su!    
1 !2 !3 !4 !5 !6 !7 !40    !  !  !1 !2 !3 !4 !44  
8 !9 !10!11!12!13!14!41  5 !6 !7 !8 !9 !10!11!45  
15!16!17!18!19!20!21!42  12!13!14!15!16!17!18!46  
22!23!24!25!26!27!28!43  19!20!21!22!23!24!25!47  
29!30!31!  !  !  !  !44  26!27!28!29!30!  !  !48  
  !  !  !  !  !  !  !      !  !  !  !  !  !  !    


# Secondary goal: to implement baisc yet functional dates API.

Take a look at my incremental implementation of dates storage: Year, YearMonth, YearMonthDay classes. 
They all extend AbstractIntDateLevel as they store their own value (like year, month or day) as int,
and use composition to store "supervalue", i.e. YearMonth also stores Year, YearMonthDay aslo stores YearMonth.
And Year has no supervalue, obviously.

The API allows to add arbitrary number of values, like +1000 or -1000 days to YearMonthDay, or months for YearMonth etc.

AbstractIntDateLevel allows to simply add a sublevels - like YMDHour, YMDHourMinute and YMDHourMinuteSecond that are still
to be added in order to also store time. Every sublevel on performing addition should correct value of superlevel. 
I.e. if we add 12 (or -12) months we should definitely correct year value.

The opposite though is only true for Days, since there is different limit for days in different months (minding leap/nonleap years).
Therefore the implementation of YearMonthDay is somewhat special, as it has to update Day on add/set of Month.

The API provides all basic functionality, like comparing dates (you can find out number of days inbetween two YearMonthDay values, 
or number of months inbetween two YearMonth values; also simpler features are all there - like isBefore/isAfter/isSame methods),
obtaining number of Day in year, Week in year and Day of week for YearMonthDay class.

Some features of YearMonthDay "borrowed" from open sources:
- Formula for calculating day of week - Zeller's congruence implementation, looked up somewhere on web (don't remember exactly if it was StackOverflow or some place else);
- Calendar days difference calculation (used for unit test) - looked up here: http://tripoverit.blogspot.com/2007/07/java-calculate-difference-between-two.html
